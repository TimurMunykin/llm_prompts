{
  "error": {
    "name": "AI_APICallError",
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "requestBodyValues": {
      "model": "anthropic/claude-sonnet-4",
      "max_tokens": 32000,
      "temperature": 0.2,
      "messages": [
        {
          "role": "user",
          "content": "\nGoal:\n\nGenerate a UI component that satisfies the user's request with a refined design, heavily inspired by the reference components provided.\n\nComponent Requirements:\n- Use Tailwind CSS for styling\n- Use shadcn theming variables like `bg-background`, `text-foreground`, `border-border`, etc.\n- Use icons only from 'lucide-react' or '@remixicon/react' libraries\n\nCRITICAL - Component Inclusion Rules:\n1. ONLY use components from this default list without including their code:\n'accordion', 'alert-dialog', 'alert', 'aspect-ratio', 'avatar', 'badge', 'breadcrumb', 'button', 'calendar', 'card', 'carousel', 'chart', 'checkbox', 'collapsible', 'command', 'context-menu', 'dialog', 'drawer', 'dropdown-menu', 'form', 'hover-card', 'input-otp', 'input', 'label', 'menubar', 'navigation-menu', 'pagination', 'popover', 'progress', 'radio-group', 'resizable', 'scroll-area', 'select', 'separator', 'sheet', 'sidebar', 'skeleton', 'slider', 'sonner', 'switch', 'table', 'tabs', 'textarea', 'toast', 'toaster', 'toggle-group', 'toggle', 'tooltip', 'use-mobile'\n\n2. If you use ANY component from the reference examples that is NOT in the default list above (like Spotlight, SplineScene, etc.), you MUST include its FULL implementation code in the output file - do not just import it.\n\n3. Every component that is used in your code MUST either:\n - Be a standard React/HTML element (div, span, etc.)\n - Be importable from an external library (framer-motion, lucide-react, etc.)\n - Be on the default component list above\n - OR have its FULL implementation included in the output\n\nTypeScript/React Code Quality Requirements:\n1. DO NOT both import AND implement the same functionality - choose one approach; We should not have Duplicate names in the output file. IT'S A MUST\n2. When adapting code from references, merge duplicate functionality instead of copying it\n3. PROPERLY define and use TypeScript interfaces and types for all props and data\n4. CHECK all imports are present and correctly referenced\n5. ENSURE only ONE default export in the entire file\n6. FOLLOW React Hooks rules (don't use hooks conditionally, etc.)\n7. VERIFY no naming collisions between different components or variables\n\nComponent Guidelines:\n- All props must contain default values for preview purpose of this component.\n- Generated component must be fully working and ready to use, it will be inserted without props, just as like \"<Component />\"\n- For application UI components, prioritize using shadcn components as a foundation\n- For marketing components, you have more creative freedom\n- IMPORTANT: Carefully analyze the structure, styling patterns, and component composition from the reference examples\n\nReturn Format:\nReturn ONE complete TypeScript/TSX file that includes:\n1. ALL necessary imports (from external libraries like framer-motion, etc.)\n2. The FULL implementation of ANY custom components used (including those found in reference examples)\n3. The main component implementation\n4. A usage example with `export default`\n\nInstructions:\n1. Thoroughly analyze the reference components provided - these are your primary inspiration\n2. Identify patterns, styling approaches, and component structures from these examples\n3. If using components from references that aren't in the default list, include their COMPLETE implementation code\n4. NEVER import a component from \"@/components/ui/\" unless it's in the default list provided above\n5. SCAN the entire file for duplicate declarations before finalizing\n6. REVIEW the final code to ensure it's TypeScript-valid with no duplications or runtime issues\n\nUser Message:\n```\n# Task: Create Form UI for Freshwater Project Submission\n\n## Objective\nDesign and implement a form that allows users (e.g. Rotary Clubs) to input freshwater project information. Do **not** use a wizard or step-based flow. Use a scrollable layout or tabbed interface where all sections are independently accessible.\n\n## Fields to Include\n\n- **Rotary Club Name** (text input)\n\n- **Name of Project** – Include local waterbody or watershed name (text input)\n- **Project Description** (multiline text input)\n- **Add polygon** – Allow users to define a geographic area (map or polygon input)\n- **Waterbody Name** (text input)\n- **Local Waterbody Name** (text input)\n- **Waterbody Type** – e.g. river, lake, etc. (dropdown)\n\n- **Upload Photos of Waterbody** – Up to 5 images (image upload input)\n- **How many other Rotary Clubs are working with you on this freshwater project?** (number input)\n\n- **Planned Activities** (multiline text input)\n- **Do you want to participate in Citizen Science to monitor water quality?** (yes/no toggle)\n- **Do you need funding or fundraisers to get started?** (yes/no toggle)\n- **Do you need technical assistance for this project?** (yes/no toggle)\n- **Project Status** – e.g. Planning, Active, Completed (dropdown)\n- **Project Duration** – Estimated time or date range (text or date input)\n\n- **How is the water used?** – e.g. drinking, irrigation, etc. (multiline text input)\n- **Freshwater ecosystem threats or pollutants** (multiline text input)\n- **Number of Partners Engaged** (number input)\n- **Name of Partners** (multiline or tag input)\n- **Is the work contributing to the government’s water management plans?** (yes/no toggle)\n- **Type of Funding** – e.g. Grant, Donation, Self-funded (dropdown)\n- **Amount of money invested to support the project** (currency input)\n\n## UX Notes\n\n- Avoid step-by-step/wizard navigation.\n- Use a single-page scrollable form or tabbed layout.\n- Organize logically grouped fields into collapsible sections or tabs.\n- Include form validation (e.g. required fields, input limits).\n- Provide a sticky submit/save button at the end.\n- (Optional) Add a sidebar with anchor links to each group of fields.\n```\n\nReference Components:\n```\n\n```\n\nGenerate a single valid, complete TypeScript/TSX file that includes ALL necessary code to make the component work. The file must include both the component implementation and a usage example with `export default`. Answer should contain only the code with no additional text or comments.\n"
        }
      ],
      "stream": true,
      "stream_options": { "include_usage": true }
    },
    "statusCode": 402,
    "responseHeaders": {
      "access-control-allow-origin": "*",
      "cf-ray": "951ad339bef9cee5-SJC",
      "connection": "keep-alive",
      "content-length": "110",
      "content-type": "application/json",
      "date": "Wed, 18 Jun 2025 12:35:11 GMT",
      "server": "cloudflare",
      "vary": "Accept-Encoding",
      "x-clerk-auth-message": "Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid, token-carrier=header)",
      "x-clerk-auth-reason": "token-invalid",
      "x-clerk-auth-status": "signed-out"
    },
    "responseBody": "{\"error\":{\"message\":\"Insufficient credits. Add more using https://openrouter.ai/settings/credits\",\"code\":402}}",
    "isRetryable": false
  }
}
